//@version=5
//@strategy_alert_message {{strategy.order.alert_message}}
import dokang/POA/12 as POA
password = "1q2w3e4r%t"

// 시작시간, 종료시간 설정
start_time = input.time(timestamp("2023-10-24T19:36:00+09:00"), title="자동매매 시작")
end_time = input.time(timestamp("2024-09-19T21:31:00+09:00"), title="자동매매 종료")

in_trade = POA.in_trade(start_time, end_time)
bgcolor(in_trade ? color.rgb(83, 107, 173, 94) : na)

//
// 다이버전스 템플릿에 과매수/과매도 조건 추가.
//
//
//
strategy("다이버전스 템플릿", overlay=false, process_orders_on_close = true, initial_capital = 1000000, default_qty_type = strategy.percent_of_equity, default_qty_value = 100)

left = input.int(5, "left")
right = input.int(5, "right")

// 1. 지표
osc = ta.rsi(close, 14)
plot(osc, linewidth = 2)
overBuy = 50//70 //과매수
overSell = 50//30 //과매도

h1 = hline(70)//hline(overBuy)
h2 = hline(30)//hline(overSell)

// 2. 피봇 찾기 (상승div-피봇로우, 하락div-피봇하이)
pivotlow = ta.pivotlow(osc, left, right) 
pivothigh = ta.pivothigh(osc, left, right)
is_pivotlow = not na(pivotlow)
is_pivothigh = not na(pivothigh)

// 3. 다이버전스 찾기

// 상승 다이버전스
prev_pivotlow = ta.valuewhen(is_pivotlow, pivotlow, 1)
osc_higher_low =  is_pivotlow ? pivotlow > prev_pivotlow : false 
isUnderSell = pivotlow < overSell // 과매도 값은 30 인데,, pivotlow라는값은 rsi값이므로 0 ~ 100 사이의 값임.
prev_low = ta.valuewhen(is_pivotlow, low[right], 1)
price_lower_low = is_pivotlow ? low[right] < prev_low : false
is_regular_bullish_divergence = osc_higher_low and price_lower_low and isUnderSell
plotshape(is_regular_bullish_divergence ? is_pivotlow  : na, offset = -right, title="상승 다이버전스", text = "Bull", style = shape.labelup, color = color.green, textcolor = color.white, location = location.bottom)
plot(is_pivotlow ? pivotlow : na, color = is_regular_bullish_divergence ? color.green : na, offset = -right, linewidth = 2)

// 히든 상승다이버전스 
osc_lower_low = is_pivotlow ? pivotlow < prev_pivotlow : false
isUnderSell := pivotlow < overSell // 과매도 값은 30 인데,, pivotlow라는값은 rsi값이므로 0 ~ 100 사이의 값임.
price_higher_low = is_pivotlow ? low[right] > prev_low : false
is_hidden_bullish_divergence = osc_lower_low and price_higher_low and isUnderSell
plotshape(is_hidden_bullish_divergence ? is_pivotlow : na, offset = -right, title="히든 상승 다이버전스", text = "H Bull", style = shape.labelup, color = color.green, textcolor = color.white, location = location.bottom)
plot(is_pivotlow ? pivotlow : na, color = is_hidden_bullish_divergence ? color.green : na, offset = -right, linewidth = 2)

// 하락다이버전스
prev_pivothigh = ta.valuewhen(is_pivothigh, pivothigh, 1)
osc_lower_high = is_pivothigh ? pivothigh < prev_pivothigh : false
isOverBuy = pivothigh > overBuy // pivothigh는 0 ~ 100 사이에 있는 rsi값임. ,, overBuy 는 80같은 값
prev_high = ta.valuewhen(is_pivothigh, high[right], 1)
price_higher_high = is_pivothigh ? high[right] > prev_high : false
is_regular_bearish_divergence = osc_lower_high and price_higher_high and isOverBuy
plotshape(is_regular_bearish_divergence ? is_pivothigh : na, offset = -right, title="하락 다이버전스", text = "Bear", style = shape.labeldown, color = color.red, textcolor = color.white, location = location.top)
plot(is_pivothigh ? pivothigh : na, color = is_regular_bearish_divergence ? color.red : na, offset = -right, linewidth = 2)

// 히든 하락 다이버전스
osc_higher_high = is_pivothigh ? pivothigh > prev_pivothigh : false
isOverBuy := pivothigh > overBuy // pivothigh는 0 ~ 100 사이에 있는 rsi값임. ,, overBuy 는 80같은 값
price_lower_high = is_pivothigh ? high[right] < prev_high : false
is_hidden_bearish_divergence = osc_higher_high and price_lower_high and isOverBuy
plotshape(is_hidden_bearish_divergence ? is_pivothigh : na, offset = -right, title="히든 하락 다이버전스", text = "H Bear", style = shape.labeldown, color = color.red, textcolor = color.white, location = location.top)
plot(is_pivothigh ? pivothigh : na, color = is_hidden_bearish_divergence ? color.red : na, offset = -right, linewidth = 2)


//4. 전략 진입 | 종료

// 스탑 트레일링 
long_stop_price = 0.0 // 롱스탑 프라이스 초기화 .
short_stop_price = 99999.9 // 숏스탑 프라이스 초기화 .
long_trail_percent = input.float(2.0, "롱 트레일")/100
short_trail_percent = input.float(2.0, "숏 트레일")/100


// 롱 트레일링 스탑

is_long = is_regular_bullish_divergence or is_hidden_bullish_divergence
is_long_close = is_regular_bearish_divergence or is_hidden_bearish_divergence

if in_trade
    if( is_long and strategy.position_size == 0 )
        strategy.entry( "롱", strategy.long, alert_message = POA.entry_message(password))
        strategy.exit("손익절","롱", stop= close * ( 1- long_trail_percent ), alert_message = POA.exit_message(password) ,comment_profit="익절", comment_loss="손절")


if in_trade
    if( is_long_close ) // 하락다이버전스가 뜨면, 롱은 종료 , 숏 진입(숏스탑조건세팅).
        strategy.close( "롱", comment = "롱 종료", alert_message = POA.close_message(password))
        //strategy.entry( "숏", strategy.short, alert_message = POA.entry_message(password))
        //strategy.exit("손익절", "숏", stop= short_stop_price,  alert_message = POA.exit_message(password) ,comment_profit="익절", comment_loss="손절")

if strategy.position_size > 0
    stop_value = close * ( 1- long_trail_percent )
    long_stop_price := math.max( stop_value, long_stop_price[1] ) // 내가 이전에 계산해 놨던 long stop proce를 가져와서 비교하여 max저장.
else 
    long_stop_price := 0.0 // 롱 스탑 을 무력화.

if strategy.position_size > 0  // 계속 stop주문은 변경이 된다. 
    strategy.exit("손익절", "롱", stop= long_stop_price, alert_message = POA.exit_message(password) ,comment_profit="익절", comment_loss="손절")

plot( strategy.position_size > 0 ? long_stop_price : na , style= plot.style_linebr, color=color.green, linewidth=2) // 롱스탑값이 없으면 안그리고 있을 때 그림.

// 숏 트레일링 스탑

is_short = is_regular_bearish_divergence or is_hidden_bearish_divergence
is_short_close = is_regular_bullish_divergence or is_hidden_bullish_divergence

if in_trade
    if( is_short and strategy.position_size == 0 )
        strategy.entry( "숏", strategy.short, alert_message = POA.entry_message(password))
        strategy.exit("손익절","숏", stop= close * ( 1+ long_trail_percent ), alert_message = POA.exit_message(password) ,comment_profit="익절", comment_loss="손절")


if in_trade
    if( is_short_close ) // 상승다이버전스가 뜨면, 숏은 종료 , 롱 진입(롱스탑조건세팅).
        strategy.close( "숏", comment = "숏 종료", alert_message = POA.close_message(password))
        //strategy.entry( "롱", strategy.long, alert_message = POA.entry_message(password))
        //strategy.exit("손익절", "롱", stop= long_stop_price,  alert_message = POA.exit_message(password) ,comment_profit="익절", comment_loss="손절")

if strategy.position_size < 0
    stop_value = close * ( 1+ short_trail_percent )
    short_stop_price := math.min( stop_value, short_stop_price[1] ) // 내가 이전에 계산해 놨던 long stop proce를 가져와서 비교하여 max저장.
else 
    long_stop_price := 99999.9 // 숏 스탑 을 무력화.

if strategy.position_size < 0  // 계속 stop주문은 변경이 된다. 
    strategy.exit("손익절", "숏", stop= short_stop_price, alert_message = POA.exit_message(password) ,comment_profit="익절", comment_loss="손절")

plot( strategy.position_size < 0 ? short_stop_price : na , style= plot.style_linebr, color=color.red, linewidth=2) // 숏스탑값이 없으면 안그리고 있을 때 그림.


